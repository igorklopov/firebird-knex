'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _inherits = require('inherits');

var _inherits2 = _interopRequireDefault(_inherits);

var _knexLibSchemaTablecompiler = require('knex/lib/schema/tablecompiler');

var _knexLibSchemaTablecompiler2 = _interopRequireDefault(_knexLibSchemaTablecompiler);

// Table Compiler
// -------

function TableCompiler_Firebird() {
  _knexLibSchemaTablecompiler2['default'].apply(this, arguments);
}
_inherits2['default'](TableCompiler_Firebird, _knexLibSchemaTablecompiler2['default']);

Object.assign(TableCompiler_Firebird.prototype, {
  // Create a new table.
  createQuery: function createQuery(columns, ifNot) {
    if (ifNot) throw new Error('createQuery ifNot not implemented');
    var createStatement = 'create table ';
    var sql = createStatement + this.tableName() + ' (' + columns.sql.join(', ') + ')';
    this.pushQuery(sql);
  },

  // Compile a plain index key command.
  index: function index(columns, indexName) {
    indexName = indexName ? this.formatter.wrap(indexName) : this._indexCommand('index', this.tableNameRaw, columns);
    this.pushQuery('create index ' + indexName + ' on ' + this.tableName() + ' (' + this.formatter.columnize(columns) + ')');
  },

  //TableCompiler_Firebird.prototype.foreign =
  primary: function primary() {
    constraintName = constraintName ? this.formatter.wrap(constraintName) : this.formatter.wrap(this.tableNameRaw + '_pkey');
    this.pushQuery('alter table ' + this.tableName() + ' add constraint ' + constraintName + ' primary key (' + this.formatter.columnize(columns) + ')');
  }

});

exports['default'] = TableCompiler_Firebird;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEvdGFibGVjb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7d0JBQXFCLFVBQVU7Ozs7MENBQ0wsK0JBQStCOzs7Ozs7O0FBS3pELFNBQVMsc0JBQXNCLEdBQUk7QUFDakMsMENBQWMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztDQUN0QztBQUNELHNCQUFTLHNCQUFzQiwwQ0FBZ0IsQ0FBQzs7QUFFaEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUU7O0FBRTlDLGFBQVcsRUFBQSxxQkFBQyxPQUFPLEVBQUUsS0FBSyxFQUFDO0FBQ3pCLFFBQUksS0FBSyxFQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztBQUNoRSxRQUFNLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFDeEMsUUFBSSxHQUFHLEdBQUcsZUFBZSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ25GLFFBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDckI7OztBQUlELE9BQUssRUFBQSxlQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUM7QUFDdkIsYUFBUyxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2pILFFBQUksQ0FBQyxTQUFTLG1CQUFpQixTQUFTLFlBQU8sSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFJLENBQUM7R0FDM0c7OztBQUdELFNBQU8sRUFBQSxtQkFBRTtBQUNQLGtCQUFjLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFJLElBQUksQ0FBQyxZQUFZLFdBQVEsQ0FBQztBQUN6SCxRQUFJLENBQUMsU0FBUyxrQkFBZ0IsSUFBSSxDQUFDLFNBQVMsRUFBRSx3QkFBbUIsY0FBYyxzQkFBaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQUksQ0FBQztHQUN2STs7Q0FFRixDQUFDLENBQUM7O3FCQUVZLHNCQUFzQiIsImZpbGUiOiJ0YWJsZWNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGluaGVyaXRzIGZyb20gJ2luaGVyaXRzJztcclxuaW1wb3J0IFRhYmxlQ29tcGlsZXIgZnJvbSAna25leC9saWIvc2NoZW1hL3RhYmxlY29tcGlsZXInO1xyXG5cclxuLy8gVGFibGUgQ29tcGlsZXJcclxuLy8gLS0tLS0tLVxyXG5cclxuZnVuY3Rpb24gVGFibGVDb21waWxlcl9GaXJlYmlyZCAoKSB7XHJcbiAgVGFibGVDb21waWxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcbmluaGVyaXRzKFRhYmxlQ29tcGlsZXJfRmlyZWJpcmQsIFRhYmxlQ29tcGlsZXIpO1xyXG5cclxuT2JqZWN0LmFzc2lnbihUYWJsZUNvbXBpbGVyX0ZpcmViaXJkLnByb3RvdHlwZSwge1xyXG4gIC8vIENyZWF0ZSBhIG5ldyB0YWJsZS5cclxuICBjcmVhdGVRdWVyeShjb2x1bW5zLCBpZk5vdCl7XHJcbiAgICBpZiAoaWZOb3QpIHRocm93IG5ldyBFcnJvcignY3JlYXRlUXVlcnkgaWZOb3Qgbm90IGltcGxlbWVudGVkJyk7XHJcbiAgICBjb25zdCBjcmVhdGVTdGF0ZW1lbnQgPSAnY3JlYXRlIHRhYmxlICc7XHJcbiAgICBsZXQgc3FsID0gY3JlYXRlU3RhdGVtZW50ICsgdGhpcy50YWJsZU5hbWUoKSArICcgKCcgKyBjb2x1bW5zLnNxbC5qb2luKCcsICcpICsgJyknO1xyXG4gICAgdGhpcy5wdXNoUXVlcnkoc3FsKTtcclxuICB9LFxyXG5cclxuXHJcbiAgLy8gQ29tcGlsZSBhIHBsYWluIGluZGV4IGtleSBjb21tYW5kLlxyXG4gIGluZGV4KGNvbHVtbnMsIGluZGV4TmFtZSl7XHJcbiAgICBpbmRleE5hbWUgPSBpbmRleE5hbWUgPyB0aGlzLmZvcm1hdHRlci53cmFwKGluZGV4TmFtZSkgOiB0aGlzLl9pbmRleENvbW1hbmQoJ2luZGV4JywgdGhpcy50YWJsZU5hbWVSYXcsIGNvbHVtbnMpO1xyXG4gICAgdGhpcy5wdXNoUXVlcnkoYGNyZWF0ZSBpbmRleCAke2luZGV4TmFtZX0gb24gJHt0aGlzLnRhYmxlTmFtZSgpfSAoJHt0aGlzLmZvcm1hdHRlci5jb2x1bW5pemUoY29sdW1ucyl9KWApO1xyXG4gIH0sXHJcblxyXG4gIC8vVGFibGVDb21waWxlcl9GaXJlYmlyZC5wcm90b3R5cGUuZm9yZWlnbiA9XHJcbiAgcHJpbWFyeSgpe1xyXG4gICAgY29uc3RyYWludE5hbWUgPSBjb25zdHJhaW50TmFtZSA/IHRoaXMuZm9ybWF0dGVyLndyYXAoY29uc3RyYWludE5hbWUpIDogdGhpcy5mb3JtYXR0ZXIud3JhcChgJHt0aGlzLnRhYmxlTmFtZVJhd31fcGtleWApO1xyXG4gICAgdGhpcy5wdXNoUXVlcnkoYGFsdGVyIHRhYmxlICR7dGhpcy50YWJsZU5hbWUoKX0gYWRkIGNvbnN0cmFpbnQgJHtjb25zdHJhaW50TmFtZX0gcHJpbWFyeSBrZXkgKCR7dGhpcy5mb3JtYXR0ZXIuY29sdW1uaXplKGNvbHVtbnMpfSlgKTtcclxuICB9XHJcblxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhYmxlQ29tcGlsZXJfRmlyZWJpcmQ7XHJcbiJdfQ==